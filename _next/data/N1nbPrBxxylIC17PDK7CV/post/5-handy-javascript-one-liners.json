{"pageProps":{"title":"5 handy JavaScript one-liners","description":"5 handy JavaScript one-liners","date":"2016-05-17T00:46:55.892Z","lastmod":"2016-05-17T00:46:55.892Z","slug":"5-handy-javascript-one-liners","categories":["Web-Development","Development"],"tags":["JavaScript"],"thumbnail":"https://2.bp.blogspot.com/-k0RYC7NXty4/WhDKfhg_TnI/AAAAAAAAD20/4PH54d0axJEQkfOHzsnKaFAnjvpOVFMrwCLcBGAs/s400/1433693516339_zpsor3v2pza.png","image":"https://2.bp.blogspot.com/-k0RYC7NXty4/WhDKfhg_TnI/AAAAAAAAD20/4PH54d0axJEQkfOHzsnKaFAnjvpOVFMrwCLcBGAs/s1600/1433693516339_zpsor3v2pza.png","source":"https://gist.github.com/nepsilon/066098f6b5be23cd39bdca6676aef323","content":"\n\n## Generate a random string\n\n    Math.random().toString(36).substr(2);\n\n<span style=\"color:rgb(34, 34, 34); font-family:helvetica neue,helvetica,helvetica,arial,sans-serif; font-size:15px\">This simply generates a random float, casts it into a String using base 36 and remove the 2 first chars </span>``0``<span style=\"color:rgb(34, 34, 34); font-family:helvetica neue,helvetica,helvetica,arial,sans-serif; font-size:15px\"> and </span>``.``<span style=\"color:rgb(34, 34, 34); font-family:helvetica neue,helvetica,helvetica,arial,sans-serif; font-size:15px\">.</span>\n\n## Clone an array\n\n    var newA = myArray.slice(0);\n\n<span style=\"color:rgb(34, 34, 34); font-family:helvetica neue,helvetica,helvetica,arial,sans-serif; font-size:15px\">This will return a copy of the array, ensuring no other variables point to it.</span>\n\n## Remove HTML tags\n\n    '<b>A</b>'.replace(/<[^>]+>/gi, '');\n\n<span style=\"color:rgb(34, 34, 34); font-family:helvetica neue,helvetica,helvetica,arial,sans-serif; font-size:15px\">This is using a simple regular expression to remove any string that looks like </span>``<xxx>``<span style=\"color:rgb(34, 34, 34); font-family:helvetica neue,helvetica,helvetica,arial,sans-serif; font-size:15px\"> where </span>``x``<span style=\"color:rgb(34, 34, 34); font-family:helvetica neue,helvetica,helvetica,arial,sans-serif; font-size:15px\"> can be any char, including </span>``/``<span style=\"color:rgb(34, 34, 34); font-family:helvetica neue,helvetica,helvetica,arial,sans-serif; font-size:15px\">.</span>\n\n## Set a default value\n\n    function foo(opts) { \n       var options = opts || {}; \n    }\n\n<span style=\"color:rgb(34, 34, 34); font-family:helvetica neue,helvetica,helvetica,arial,sans-serif; font-size:15px\">You will see this in any decent JS code. If </span>`opts`<span style=\"color:rgb(34, 34, 34); font-family:helvetica neue,helvetica,helvetica,arial,sans-serif; font-size:15px\"> is defined and not “binarily” </span>`false `<span style=\"color:rgb(34, 34, 34); font-family:helvetica neue,helvetica,helvetica,arial,sans-serif; font-size:15px\">it will be assigned to </span>``options``<span style=\"color:rgb(34, 34, 34); font-family:helvetica neue,helvetica,helvetica,arial,sans-serif; font-size:15px\">, otherwise it will assign an empty dictionary </span>``{}``<span style=\"color:rgb(34, 34, 34); font-family:helvetica neue,helvetica,helvetica,arial,sans-serif; font-size:15px\">.</span>\n\n##  Reverse a string\n\n    var str = \"Pouet this string.\"; \n    str.split('').reverse().join(''); // \"gnirts siht teuoP\"  \n\n    // Keep words order with: \n    str.split(' ').reverse().join(' '); // \"string this Pouet\"\n\n<span style=\"color:rgb(34, 34, 34); font-family:helvetica neue,helvetica,helvetica,arial,sans-serif; font-size:15px\">The first example splits on every character, reverses them and puts them back together. The second splits only on words and joins them back separated by a space.</span>","permalink":"/post/5-handy-javascript-one-liners","site":{"categories":[{"name":"Algorithm","count":1},{"name":"Design","count":10},{"name":"Development","count":38},{"name":"Interview","count":4},{"name":"Mobile-Development","count":1},{"name":"Resources","count":15},{"name":"System Design","count":2},{"name":"System-Design","count":2},{"name":"Tools","count":1},{"name":"Web Management","count":5},{"name":"Web-Development","count":37}],"tags":[{"name":".NET","count":2},{"name":"Algorithm","count":1},{"name":"AngularJS","count":4},{"name":"CSS","count":7},{"name":"HTML","count":4},{"name":"Interview","count":8},{"name":"JavaScript","count":27},{"name":"Mobile","count":1},{"name":"Node.JS","count":8},{"name":"React","count":1},{"name":"Tools","count":1}]}},"__N_SSG":true}