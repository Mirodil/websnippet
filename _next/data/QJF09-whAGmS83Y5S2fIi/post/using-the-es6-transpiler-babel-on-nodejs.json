{"pageProps":{"title":"Using the ES6 transpiler Babel on Node.js","description":"This post explains how to use the ES6 transpiler Babel with Node.js. Use next generation JavaScript, today with Babel JavaScript compiler. ECMAScript 6 is the upcoming version of the ECMAScript standard. This standard is targeting ratification in June 2015. ES6 is a significant update to the language, and the first update to the language since ES5 was standardized in 2009. Implementation of these features in major JavaScript engines is underway now.","date":"2015-05-21T09:46:23.021Z","lastmod":"2015-05-21T09:46:23.021Z","slug":"using-the-es6-transpiler-babel-on-nodejs","categories":["Web-Development","Development"],"tags":["Node.JS"],"thumbnail":"http://rs963.pbsrc.com/albums/ae120/Mirodil/WebSnippet/babel.png~c200","image":"http://i963.photobucket.com/albums/ae120/Mirodil/WebSnippet/babel.png","source":"","content":"\n\nThis post explains how to use the ES6 transpiler Babel with Node.js. Use next generation JavaScript, today with Babel JavaScript compiler.\n\n## Running normal Node.js code via Babel\n\nFirts needs to install babel package. The npm package `babel` brings Babel support to Node.js:\n\n    $ npm install --global babel\n\nThis package contains the shell script `babel-node`, which is a Babel-ified version of `node`. It compiles everything from ES6 to ES5 that is run or required. For example, you can start a REPL via the following shell command:\n\n    $ babel-node\n\nIn the REPL, you can use ES6:\n\n     > [1,2,3].map(x => x * x)\n        [ 1, 4, 9 ]\n\n`babel-node` also lets you run Node.js scripts such as the following one.\n\n    // point.js\n    export class Point {\n        constructor(x, y) {\n            this.x = x;\n            this.y = y;\n        }\n    }\n    if (require.main === module) {\n        let pt = new Point(7,4);\n        console.log(`My point: ${JSON.stringify(pt)}`);\n    }\n\nThe following shell command runs `point.js`:\n\n    $ babel-node point.js \n        My point: {\"x\":7,\"y\":4}\n\nThe package `babel` has many more features, which are all [documented](http://babeljs.io/docs/using-babel/#node) on the Babel website. For example, from within a normal Node module, you can install a “require hook”, which compiles all required modules via Babel (except, by default, modules in`node_modules`).\n\n## Running Jasmine unit tests via Babel\n\nAnother npm package, [babel-jest](https://github.com/babel/babel-jest), is a preprocessor for [the Jasmine-based unit testing tool Jest](http://facebook.github.io/jest/).\n\nOne way to install babel-jest is by mentioning it in the `devDependencies` of your`package.json`:\n\n    {\n      \"devDependencies\": {\n        \"babel-jest\": \"*\",\n        \"jest-cli\": \"*\"\n      },\n      \"scripts\": {\n        \"test\": \"jest\"\n      },\n      \"jest\": {\n        \"scriptPreprocessor\": \"<rootDir>/node_modules/babel-jest\",\n        \"testFileExtensions\": [\"js\"],\n        \"moduleFileExtensions\": [\"js\", \"json\"],\n        \"testDirectoryName\": \"spec\"\n      }\n    }\n\nAfterwards, you only need to execute the following command inside the directory of`package.json` and both babel-jest and a command line interface (CLI) for Jest will be installed.\n\n    npm install\n\nThe configuration options for Jest are [documented](http://facebook.github.io/jest/docs/api.html) on its website. I have used`testDirectoryName` to specify that the tests are inside the directory `spec` (the default is`__tests__`). Let’s add the following test file to that directory: \n\n    // spec/point.spec.js\n    jest.autoMockOff();\n    import { Point } from '../point';\n\n    describe('Point', () => {\n        it('sets up instance properties correctly', () => {\n            let p = new Point(1, 5);\n            console.log(JSON.stringify(p));\n            expect(p.x).toBe(1);\n            expect(p.y).toBe(5);\n        });\n    });\n\nBecause we have specified `scripts.test` in `package.json`, we can run all tests inside`spec/` via the following command:\n\n    npm test","permalink":"/post/using-the-es6-transpiler-babel-on-nodejs","site":{"categories":[{"name":"Algorithm","count":1},{"name":"Design","count":10},{"name":"Development","count":37},{"name":"Interview","count":1},{"name":"Mobile-Development","count":1},{"name":"Resources","count":14},{"name":"System Design","count":1},{"name":"Tools","count":1},{"name":"Web Management","count":5},{"name":"Web-Development","count":36}],"tags":[{"name":".NET","count":2},{"name":"Algorithm","count":1},{"name":"AngularJS","count":4},{"name":"CSS","count":6},{"name":"HTML","count":3},{"name":"Interview","count":2},{"name":"JavaScript","count":26},{"name":"Mobile","count":1},{"name":"Node.JS","count":8},{"name":"React","count":1},{"name":"Tools","count":1}]}},"__N_SSG":true}