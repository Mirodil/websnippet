{"pageProps":{"title":"Video Streaming with NodeJS","description":"Streaming small video files to HTML5 video with Node is easy what about big one, how streaming (any size) video files with node.js","date":"2016-03-27T05:46:51.827Z","lastmod":"2016-04-21T21:19:40.230Z","slug":"video-streaming-with-nodejs","categories":["Web-Development","Development"],"tags":["Node.JS"],"thumbnail":"https://4.bp.blogspot.com/-9tcBliK6fN4/WhDK9gRtsTI/AAAAAAAAD24/QWBZCzXmABQAxZkRCUNOI4gjcjO7EHLSgCLcBGAs/s400/nodejs.png","image":"https://4.bp.blogspot.com/-9tcBliK6fN4/WhDK9gRtsTI/AAAAAAAAD24/QWBZCzXmABQAxZkRCUNOI4gjcjO7EHLSgCLcBGAs/s1600/nodejs.png","source":"","content":"\n\nWe can stream video files by utilizing fs.createReadStream(), the server can read the file in a stream rather than reading it all into memory at once. First, we need to create node.js server(here is a code).\n\n    var fs = require(\"fs\"),\n        http = require(\"http\"),\n        url = require(\"url\"),\n        path = require(\"path\");\n\n    http.createServer(function (req, res) {\n      if (req.url = '/movie.mp4') {\n        // here will be code :)\n      }\n    }).listen(3000);\n\nWe will take care about the `Accept-Ranges` header  as is required for the HTML5 video controls to work instead of just blindly send the full file. So we should first check the `Accept-Ranges` header in the incoming request, then read in and send just that bit.\n\n    var range = req.headers.range;\n    var positions = range.replace(/bytes=/, '').split('-');\n    var start = parseInt(positions[0], 10);\n\n Now we hava to check requested file and after write reponse header:\n\n    fs.stat(file, function(err, stats) {    \n        var total = stats.size;\n        var end = positions[1] ? parseInt(positions[1], 10) : total - 1;\n        var chunkSize = (end - start) + 1;\n\n        res.writeHead(206, {\n            'Content-Range': 'bytes ' + start + '-' + end + '/' + total,\n            'Accept-Ranges': 'bytes',\n            'Content-Length': chunkSize,\n            'Content-Type': 'video/mp4'\n        });\n    });\n\nThe main part, create stream with `fs.createReadStream`:\n\n    var stream = fs.createReadStream(file, { start: start, end: end })\n        .on(\"open\", function() {\n            stream.pipe(res);\n        }).on(\"error\", function(err) {\n            res.end(err);\n        });\n\nThat is all. Here is complete code:\n\n    var fs = require('fs'),\n        http = require('http'),\n        url = require('url'),\n        path = require('path');\n\n    http.createServer( (req, res)=>{\n      if (req.url === '/movie.mp4') {\n        var file = path.resolve(__dirname,'movie.mp4');\n        var range = req.headers.range;\n        var positions = range.replace(/bytes=/, '').split('-');\n        var start = parseInt(positions[0], 10);\n\n        fs.stat(file, (err, stats)=>{\n          var total = stats.size;\n          var end = positions[1] ? parseInt(positions[1], 10) : total - 1;\n          var chunkSize = (end - start) + 1;\n\n          res.writeHead(206, {\n            'Content-Range': 'bytes ' + start + '-' + end + '/' + total,\n            'Accept-Ranges': 'bytes',\n            'Content-Length': chunkSize,\n            'Content-Type': 'video/mp4'\n          });\n\n          var stream = fs.createReadStream(file, { start: start, end: end })\n            .on('open', ()=>{\n              stream.pipe(res);\n            }).on('error', (err)=>{\n              res.end(err);\n            });\n\n            res.on('close', ()=>{\n              // close or destroy stream\n              stream = null; \n            });\n        });    \n      }\n    }).listen(3000);","permalink":"/post/video-streaming-with-nodejs","site":{"categories":[{"name":"Algorithm","count":1},{"name":"Design","count":10},{"name":"Development","count":37},{"name":"Interview","count":1},{"name":"Mobile-Development","count":1},{"name":"Resources","count":14},{"name":"System Design","count":1},{"name":"Tools","count":1},{"name":"Web Management","count":5},{"name":"Web-Development","count":36}],"tags":[{"name":".NET","count":2},{"name":"Algorithm","count":1},{"name":"AngularJS","count":4},{"name":"CSS","count":6},{"name":"HTML","count":3},{"name":"Interview","count":2},{"name":"JavaScript","count":26},{"name":"Mobile","count":1},{"name":"Node.JS","count":8},{"name":"React","count":1},{"name":"Tools","count":1}]}},"__N_SSG":true}