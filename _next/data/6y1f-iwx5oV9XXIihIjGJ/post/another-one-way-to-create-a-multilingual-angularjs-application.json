{"pageProps":{"title":"Another One Way to Create a Multilingual AngularJS Application","description":"The rise of multilingual user interface has bought an interesting shift in the way complex information is perceived by today’s web users. These days, a variety of web projects demand the use of multilingual graphical interface to cater the needs of an international audience. Creating a unique international application requires you to make use of translated resource strings which ultimately lets you render the data using locale-sensitive objects.","date":"2015-05-22T11:12:26.249Z","lastmod":"2015-05-22T11:13:54.067Z","slug":"another-one-way-to-create-a-multilingual-angularjs-application","categories":["Web-Development","Development"],"tags":["AngularJS","JavaScript"],"thumbnail":"http://i963.photobucket.com/albums/ae120/Mirodil/WebSnippet/unnamed.png","image":"http://i963.photobucket.com/albums/ae120/Mirodil/WebSnippet/unnamed.png","source":"","content":"\n\nThe rise of multilingual user interface has bought an interesting shift in the way complex information is perceived by today’s web users. These days, a variety of web projects demand the use of multilingual graphical interface to cater the needs of an international audience. Creating a unique international application requires you to make use of translated resource strings which ultimately lets you render the data using locale-sensitive objects.\n\nDesigning a mobile application interface that supports a great deal of languages can help you make headways to the international market in the quickest possible manner. It also lets you earn a large number of installation base as you provide the user freedom to use your app in a language which is relevant to their choice.\n\nSince English is not enough to stay competitive, one needs to give a thought to multilingual applications to unlock the doors of other cultures. English is a global language, but there are chances that you’ll miss some other opportunities if it is all we follow, especially in a business scenario.\n\nWith this in mind, I am going to explain you a process of creating a multilingual application with Angularjs. AngularJS is a cutting-edge amongst all JavaScript frameworks that allows you to create striking mobile apps efficiently.\n\nSo, let’s begin.\n\nTo begin with, we need to create a language setting function for our interface. There are two types of components wherein this function needs to be added.\n\n*   Label\n\nWe are provided with a route parameter that allows us define the actual language the user prefers to choose. The route parameter looks something like this:\n\n    $routeProvider.when('/:lang/module/...', {...})\n\nHere, notice the use of :lang parameter that allows us to render the user current language by calling and accessable from.\n\n    $routeParams.lang\n\nNow, we will use an easy to use angular translate. It’s quite simple to set up. All you need is just add [angular-translate.js](http://angular-translate.github.io/) file to your `index.html` and use a reference of ‘pascalprecht.translate’ function while defining the module. Below is an example showcasing the entire process.\n\n    var app = angular.module('app', ['pascalprecht.translate']);\n\nOnce you are done with this, let’s proceed to create a json file for any language you want to define. For example: for English, it would be like en.js file that also contains some critical components of English language. You can go on to define any language you want like this.\n\n    // en.js\n    (function(){\n    \tvar en = angular.module(\"en\");\n    \ten.labels = { \n       \t\t\"name\": \"Name\",\n       \t\t\"surname\": \"Surname\"\n    \t};\n    })();\n\nNext, it’s time to inform our app about the language translation configuration we are playing around with for quite a while. For this, it is recommended to create an individual configuration file which we can name as main`.js`. Also, make sure you reference this file to `index.html`. Look at the following piece of code to understand the concept better.\n\n    (function(){\n    \tvar app = angular.module(\"app\");\n    \tapp.config([\"$translateProvider\", function ($translateProvider) {\n    \t\t$translateProvider.translations(\"en\", en.labels);\n            $translateProvider.translations(\"ru\", ru.labels);\n    \t\t$translateProvider.preferredLanguage(\"en\");\n    \t}]);\n    })();\n\nIf you want to add a translation for Russion language, you need to create a ru.js file which contains all the translation relating stuff.\n\n    // ru.js\n    (function(){\n    \tvar en = angular.module(\"en\");\n    \ten.labels = { \n       \t\t\"name\": \"Имя\",\n       \t\t\"surname\": \"Фамилия\"\n    \t};\n    })();\n\nNow, the above code should be added to `main.js` file.\n\n    $translateProvider.translations(\"ru\", ru.labels);\n\nWe have successfully created an automatic support for a different language.\n\nAfter this, we need to instruct our controller about the language we wish to use by fetching the param from the route and passing it to the `$translate` object.\n\n    $translate.use($routeParams.lang);\n\nWe’ll now add the dynamic labels and messages with the help of angularjs binding and filtering the same using translate.\n\n    <h1>{{greet | translate }} Plunker!</h1>\n\nThe above code will help us translate our labels on the basis of route `parameter :lang`. \n\nHere is demo result: [http://embed.plnkr.co/6i2Bxh/](http://embed.plnkr.co/6i2Bxh/)\n\nHope you’ve gained a pretty good understanding of adding a multilingual function in your angularjs application. It’s a nice way to attract international audience in the manner most effective.","permalink":"/post/another-one-way-to-create-a-multilingual-angularjs-application","site":{"categories":[{"name":"Algorithm","count":1},{"name":"Design","count":10},{"name":"Development","count":38},{"name":"Interview","count":4},{"name":"Mobile-Development","count":1},{"name":"Resources","count":15},{"name":"System Design","count":3},{"name":"System-Design","count":2},{"name":"Tools","count":1},{"name":"Web Management","count":5},{"name":"Web-Development","count":37}],"tags":[{"name":".NET","count":2},{"name":"Algorithm","count":1},{"name":"AngularJS","count":4},{"name":"CSS","count":7},{"name":"HTML","count":4},{"name":"Interview","count":9},{"name":"JavaScript","count":27},{"name":"Mobile","count":1},{"name":"Node.JS","count":8},{"name":"React","count":1},{"name":"Tools","count":1}]}},"__N_SSG":true}